# PYTHON SYNTAX
---------------

* Hello World!
--------------

If programming is the act of teaching a computer to have a conversation with a user, it would be most useful to first teach the computer how to speak. In Python, this is accomplished with 
the print statement.

print "Hello, world!"
print "Water; there is not a drop of water there! Were Niagara but a cataract of sand, would you travel your thousand miles to see it?"

A print statement is the easiest way to get your Python program to communicate with you. Being able to command this communication will be one of the most valuable tools in your 
programming toolbox.

* Instructions
--------------
Checkpoint 1 Passed
1.
Using a print statement, output a message of your choosing to the terminal.


Hint
Print a message by typing print followed by your message in quotes, like this:

print "Your Message!"

script.py
---------
print 'This  is a message!'

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Print Statements
------------------
There are two different Python versions. Both Python 2 and Python 3 are used throughout the globe. The most significant difference between the two is how you write a print statement. In 
Python 3, print has parentheses.

print("Hello World!")
print("Deep into distant woodlands winds a mazy way, reaching to overlapping spurs of mountains bathed in their hill-side blue.")

In this course we will be using Python 2. If you go on to write Python 3 it will be useful to note this key difference.

* Instructions
--------------
Checkpoint 1 Passed
1.
Print something using Python 3’s syntax.


Hint
Remember to include parentheses!

print("Your message!")

Community Forums
Here are some helpful links to the top questions asked by coders about this exercise:

Why would we use Python 2 or 3?
What is a statement?
Why Are Special Characters Not Accepted

script.py
---------
print('Hello World!')

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Strings
---------
When printing things in Python, we are supplying a text block that we want to be printed. Text in Python is considered a specific type of data called a string. A string, so named because 
they’re a series of letters, numbers, or symbols connected in order — as if threaded together by string. Strings can be defined in different ways:

print "This is a good string"
print 'You can use single quotes or double quotes for a string'

Above we printed two things that are strings and then attempted to print two things that are not strings. While double-quotes (“) and single-quotes (‘) are both acceptable ways to define 
a string, a string needs to be opened and closed by the same type of quote mark.

We can combine multiple strings using +, like so:

print "This is " + "a good string"

This code will print out “This is a good string”.

* Instructions
--------------
Checkpoint 1 Passed
1.
Try adding your name to the print statement with the + operator so that this Python program prints “Hello [your_name]”


Hint
print "Hello " + "Nicole"

script.py
---------
print "Hello " + "Andres"

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Handling Errors
-----------------
As we get more familiar with the Python programming language, we run into errors and exceptions. These are complaints that Python makes when it doesn’t understand what you want it to do. 
Everyone runs into these issues, so it is a good habit to read and understand them. Here are some common errors that we might run into when printing strings:

print "Mismatched quotes will cause a SyntaxError'
print Without quotes will cause a NameError

If the quotes are mismatched Python will notice this and inform you that your code has an error in its syntax because the line ended (called an EOL) before the double-quote that was 
supposed to close the string appeared. The program will abruptly stop running with the following message:

SyntaxError: EOL while scanning a string literal

This means that a string wasn’t closed, or wasn’t closed with the same quote-character that started it.

Another issue you might run into is attempting to create a string without quotes at all. Python treats words not in quotes as commands, like the print statement. If it fails to recognize 
these words as defined (in Python or by your program elsewhere) Python will complain the code has a NameError. This means that Python found what it thinks is a command, but doesn’t know 
what it means because it’s not defined anywhere.

* Instructions
--------------
Checkpoint 1 Passed
1.
We’ve written two print statements that will raise errors. One has mismatched quotes and the other has no quotes at all.

Fix the two print statements to successfully debug the program!


Hint
A print statement should start with the word print and then should have the message inside matching quote marks.

print 'This is a good print statement'

Double quotes are also fine:

print "This is also a good print statement"

script.py
---------
print("How do you make a hot dog stand?")
print('You take away its chair!')

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Variables
-----------
In Python, and when programming in general, we need to build systems for dealing with data that changes over time. That data could be the location of a plane, or the time of day, or the 
television show you’re currently watching. The only important thing is that it may be different at different times. Python uses variables to define things that are subject to change.

greeting_message = "Welcome to Codecademy!"
current_excercise = 5

In the above example, we defined a variable called greeting_message and set it equal to the string “Welcome to Codecademy!”. It also defined a variable called current_exercise and set it 
equal to the number 5.

* Instructions
--------------
Checkpoint 1 Passed
1.
Create a variable called todays_date and assign a value that will represent today’s date to that variable.


Hint
todays_date = "March 31, 2023"

script.py
---------
todays_date = "February 21, 2024"

------------------------------------------------------------------------------------------------------------------------------------------------------------------




























































