# CONDITIONALS & CONTROL FLOW
-----------------------------

* Go With the Flow
------------------
4 min
Just like in real life, sometimes we’d like our code to be able to make decisions.

The Python programs we’ve written so far have had one-track minds: they can add two numbers or print something, but they don’t have the ability to pick one of these outcomes over the 
other.

Control flow gives us this ability to choose among outcomes based on what else is happening in the program.

* Instructions
--------------
Checkpoint 1 Passed
1.
Check out the code in the editor. You’ll see the type of program you’ll be able to write once you’ve mastered control flow.

Press Run and interact with the program by typing in the console!

script.py
---------
def clinic():
    print "You've just entered the clinic!"
    print "Do you take the door on the left or the right?"
    answer = raw_input("Type left or right and hit 'Enter'.").lower()
    if answer == "left" or answer == "l":
        print "This is the Verbal Abuse Room, you heap of parrot droppings!"
    elif answer == "right" or answer == "r":
        print "Of course this is the Argument Room, I've told you that already!"
    else:
        print "You didn't pick left or right! Try again."
        clinic()

clinic()

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Compare Closely!
------------------
4 min
Let’s start with the simplest aspect of control flow: comparators. There are six:

Equal to (==)

>>> 2 == 2
True
>>> 2 == 5
False

Not equal to (!=)

>>> 2 != 5
True
>>> 2 != 2
False

Less than (<)

>>> 2 < 5
True
>>> 5 < 2
False

Less than or equal to (<=)

>>> 2 <= 2
True
>>> 5 <= 2
False 

Greater than (>)

>>> 5 > 2
True
>>> 2 > 5
False

Greater than or equal to (>=)

>>> 5 >= 5
True
>>> 2 >= 5
False

Comparators check if a value is (or is not) equal to, greater than (or equal to), or less than (or equal to) another value.

Note that == compares whether two things are equal, and = assigns a value to a variable.

* Instructions
--------------
Checkpoint 1 Passed
1.
Set each variable to True or False depending on what you think the result will be. For example, 1 < 2 will be True, because one is less than two.

	. Set bool_one equal to the result of 17 < 328

	. Set bool_two equal to the result of 100 == (2 * 50)
	
	. Set bool_three equal to the result of 19 <= 19

	. Set bool_four equal to the result of -22 >= -18
	
	. Set bool_five equal to the result of 99 != (98 + 1)

Hint
Remember, you set variables like this:

bool_one = True

Keep in mind that checking for equality uses a double equals sign:

True == True

script.py
---------
# Assign True or False as appropriate on the lines below!

# Set this to True if 17 < 328 or to False if it is not.
bool_one = True   # We did this one for you!

# Set this to True if 100 == (2 * 50) or to False otherwise.
bool_two = True

# Set this to True if 19 <= 19 or to False if it is not.
bool_three = True

# Set this to True if -22 >= -18 or to False if it is not.
bool_four = False

# Set this to True if 99 != (98 + 1) or to False otherwise.
bool_five = False

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Compare... Closelier!
-----------------------
2 min
Excellent! It looks like you’re comfortable with basic expressions and comparators.

But what about extreme expressions and comparators?

* Instructions
--------------
Checkpoint 1 Passed
1.
Let’s run through the comparators again with more complex expressions. Set each variable to True or False depending on what you think the result will be.

	. Set bool_one to the result of (20 - 10) > 15

	. Set bool_two to the result of (10 + 17) == 3**16

	. Set bool_three to the result of 1**2 <= -1

	. Set bool_four to the result of 40 * 4 >= -4

	. Set bool_five to the result of 100 != 10**2

script.py
---------
# Assign True or False as appropriate on the lines below!

# (20 - 10) > 15
bool_one = False    # We did this one for you!

# (10 + 17) == 3**16
# Remember that ** can be read as 'to the power of'. 3**16 is about 43 million.
bool_two = False

# 1**2 <= -1
bool_three = False

# 40 * 4 >= -4
bool_four = True

# 100 != 10**2
bool_five = False

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* How the Tables Have Turned
----------------------------
3 min
Comparisons result in either True or False, which are booleans as we learned before in this exercise.

# Make me true!
bool_one = 3 < 5

Let’s switch it up: we’ll give the boolean, and you’ll write the expression, just like the example above.

* Instructions
--------------
Checkpoint 1 Passed
1.
For each boolean value in the editor, write an expression that evaluates to that value. Remember, comparators are: ==, !=, >, >=, <, and <=.

Use at least three different ones!

Don’t just use True and False! That’s cheating!


Hint
bool_two should store a false expression, so you could try:

bool_two = 8 < 7

script.py
---------
# Create comparative statements as appropriate on the lines below!

# Make me true!
bool_one = 3 < 5  # We already did this one for you!

# Make me false!
bool_two = 3 > 5

# Make me true!
bool_three = 3** 20 != 3** 30

# Make me false!
bool_four = 6 % 2 == 6 % 4

# Make me true!
bool_five = "apple" == "apple"

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* To Be and/or Not to Be
------------------------
1 min
Boolean operators compare statements and result in boolean values. There are three boolean operators:

	1. and, which checks if both the statements are True;

	2. or, which checks if at least one of the statements is True;

	3. not, which gives the opposite of the statement.

We’ll go through the operators one by one.

* Instructions
--------------
Check out the truth tables to the right. They show the results of using AND, OR, and NOT boolean operators given the boolean inputs A and B.

Click next to continue.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* And
-----
6 min
The boolean operator and returns True when the expressions on both sides of and are true. For instance:

	. 1 < 2 and 2 < 3 is True.

	. 1 < 2 and 2 > 3 is False.

* Instructions
--------------
Checkpoint 1 Passed
1.
Let’s practice with and. Assign each variable to the appropriate boolean value.

	. Set bool_one equal to the result of
	False and False

	. Set bool_two equal to the result of
	-(-(-(-2))) == -2 and 4 >= 16 ** 0.5

	. Set bool_three equal to the result of
	19 % 4 != 300 / 10 / 10 and False

	. Set bool_four equal to the result of
	-(1 ** 2) < 2 ** 0 and 10 % 10 <= 20 - 10 * 2

	. Set bool_five equal to the result of
	True and True


Hint
Remember that a number raised to the 1/2 power is equal to the square root of that number! (For example, 25 ** 0.5 is equal to the square root of 25, which is 5.)

Be careful with bool_four—there’s a big difference between -1 ** 2 and (-1) ** 2! This is meant to be tricky.

script.py
---------
bool_one = False

bool_two = False

bool_three = False

bool_four = True

bool_five = True

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Or
----
4 min
The boolean operator or returns True when at least one expression on either side of or is true. For example:

	. 1 < 2 or 2 > 3 is True;

	. 1 > 2 or 2 > 3 is False.

* Instructions
--------------
Checkpoint 1 Passed
1.
Time to practice with or!

	. Set bool_one equal to the result of
	2 ** 3 == 108 % 100 or 'Cleese' == 'King Arthur'

	. Set bool_two equal to the result of
	True or False

	. Set bool_three equal to the result of
	100 ** 0.5 >= 50 or False

	. Set bool_four equal to the result of
	True or True

	. Set bool_five equal to the result of
	1 ** 100 == 100 ** 1 or 3 * 2 * 1 != 3 + 2 + 1


Hint
Remember, or is True when either (or both!) of the expressions involved are true.

script.py
---------
bool_one =  True
print(str(2 ** 3 == 108 % 100 or 'Cleese' == 'King Arthur'))
bool_two = True

bool_three = False

bool_four = True

bool_five = False

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Not
-----
3 min
The boolean operator not returns True for false statements and False for true statements.

For example:

	. not False will evaluate to True, while not 41 > 40 will return False.

* Instructions
--------------
Checkpoint 1 Passed
1.
Let’s get some practice with not.

	. Set bool_one equal to the result of
	not True

	. Set bool_two equal to the result of
	not 3 ** 4 < 4 ** 3

	. Set bool_three equal to the result of
	not 10 % 3 <= 10 % 2

	. Set bool_four equal to the result of
	not 3 ** 2 + 4 ** 2 != 5 ** 2

	. Set bool_five equal to the result of
	not not False


Hint
Remember, not True is False and not False is True. So, for example, bool_one should be:

bool_one = False

script.py
---------
bool_one = False

bool_two = True

bool_three = True

bool_four = True

bool_five = False

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* This and That (or This, But Not That!)
----------------------------------------
5 min
Boolean operators aren’t just evaluated from left to right. Just like with arithmetic operators, there’s an order of operations for boolean operators:

	1. not is evaluated first;

	2. and is evaluated next;

	3. or is evaluated last.

For example, True or not False and False returns True. If this isn’t clear, look at the Hint.

Parentheses () ensure your expressions are evaluated in the order you want. Anything in parentheses is evaluated as its own unit.

* Instructions
--------------
Checkpoint 1 Passed
1.
Assign True or False as appropriate for bool_one through bool_five.

	. Set bool_one equal to the result of
	False or not True and True

	. Set bool_two equal to the result of
	False and not True or True

	. Set bool_three equal to the result of
	True and not (False or False)

	. Set bool_four equal to the result of
	not not True or False and not True

	. Set bool_five equal to the result of
	False or not (True and True)


Hint
True or not False and False. not gets evaluated first, so we have True or True and False. and goes next, so we get True or False. As we’ve seen, True or False is True, so the value 
finally returned is True!

script.py
---------
bool_one = False

bool_two = True

bool_three = True

bool_four = True

bool_five = False

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Mix 'n' Match
---------------
5 min
Great work! We’re almost done with boolean operators.

# Make me false
bool_one = (2 <= 2) and "Alpha" == "Bravo"

* Instructions
--------------
Checkpoint 1 Passed
1.
This time we’ll give the expected result, and you’ll use some combination of boolean operators to achieve that result.

Remember, the boolean operators are and, or, and not. Use each one at least once!


Hint
Make sure to use at least one and, or, or not.

script.py
---------
# Use boolean expressions as appropriate on the lines below!

# Make me false!
bool_one = (2 <= 2) and "Alpha" == "Bravo"  # We did this one for you!

# Make me true!
bool_two = 4**0.5 == 2 and "Mitch" == "Mitch"

# Make me false!
bool_three = 10 % 2 == 1 or "Lima" == "Spider"

# Make me true!
bool_four = not False and True

# Make me true!
bool_five = True and True

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Conditional Statement Syntax
------------------------------
4 min
if is a conditional statement that executes some specified code after checking if its expression is True.

Here’s an example of if statement syntax:

if 8 < 9:
  print "Eight is less than nine!"

In this example, 8 < 9 is the checked expression and print "Eight is less than nine!" is the specified code.

Pay attention to the indentation before the print statement. This space, called white space, is how Python knows we are entering a new block of code. Python accepts many different kinds 
of indentation to indicate blocks. In this lesson, we use four spaces but elsewhere you might encounter two-space indentation or tabs (which Python will see as different from spaces).

If the indentation from one line to the next is different and there is no command (like if) that indicates an incoming block then Python will raise an IndentationError. These errors could 
mean, for example, that one line had two spaces but the next one had three. Python tries to indicate where this error happened by printing the line of code it couldn’t parse and using a ^ to point to where the indentation was different from what it expected.

* Instructions
--------------
Checkpoint 1 Passed
1.
If you think the print statement will print to the console, set response equal to 'Y'; otherwise, set response equal to 'N'.


Hint
Make sure to set response to "Y" or "N"!

script.py
---------
response = 'Y'

answer = "Left"
if answer == "Left":
    print "This is the Verbal Abuse Room, you heap of parrot droppings!"
    
# Will the above print statement print to the console?
# Set response to 'Y' if you think so, and 'N' if you think not.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* If You're Having...
---------------------
3 min
Let’s get some practice with if statements. Remember, the syntax looks like this:

if some_function():
  # block line one
  # block line two
  # et cetera

Looking at the example above, in the event that some_function() returns True, then the indented block of code after it will be executed. In the event that it returns False, then the 
indented block will be skipped.

Also, make sure you notice the colons at the end of the if statement. We’ve added them for you, but they’re important.

* Instructions
--------------
Checkpoint 1 Passed
1.
In the editor you’ll see two functions. Don’t worry about anything unfamiliar. We’ll explain soon enough.

	. Replace the underline on line 2 with an expression that returns True.

	. Replace the underline on line 6 with an expression that returns True.

If you do it successfully, then both "Success #1" and "Success #2" are printed.


Hint
Here’s an example to remind you of the syntax:

def true_function():
  if 1 < 2:
    return True

Don’t forget the colon at the end of the line!

script.py
---------
def using_control_once():
    if 2 * 3 == 6:
        return "Success #1"

def using_control_again():
    if "dog" == "dog":
        return "Success #2"

print using_control_once()
print using_control_again()

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Else Problems, I Feel Bad for You, Son...
-------------------------------------------
3 min
The else statement complements the if statement. An if/else pair says: “If this expression is true, run this indented code block; otherwise, run this code after the else statement.”

Unlike if, else doesn’t depend on an expression. For example:

if 8 > 9:
  print "I don't get printed!"
else:
  print "I get printed!"

* Instructions
--------------
Checkpoint 1 Passed
1.
Complete the else statements to the right. Note the indentation for each line!


Hint
To complete your else statement lines, the only thing you need to do is add False after the returns on lines 7 and 13.

script.py
---------
answer = "'Tis but a scratch!"

def black_knight():
    if answer == "'Tis but a scratch!":
        return True
    else:             
        return False        # Make sure this returns False

def french_soldier():
    if answer == "Go away, or I shall taunt you a second time!":
        return True
    else:             
        return False       # Make sure this returns False

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* I Got 99 Problems, But a Switch Ain't One
-------------------------------------------
4 min
elif is short for “else if.” It means exactly what it sounds like: “otherwise, if the following expression is true, do this!”

if 8 > 9:
  print "I don't get printed!"
elif 8 < 9:
  print "I get printed!"
else:
  print "I also don't get printed!"

In the example above, the elif statement is only checked if the original if statement is False.

* Instructions
--------------
Checkpoint 1 Passed
1.
On line 2, fill in the if statement to check if answer is greater than 5.

On line 4, fill in the elif so that the function outputs -1 if answer is less than 5.


Hint
Make sure the if and elif statements end with colons :

Your code should look something like:

if EXPRESSION:
  # do something
elif OTHER EXPRESSION:
  # do something
else:
  # do something

script.py
---------
def greater_less_equal_5(answer):
    if answer > 5:
        return 1
    elif answer < 5:          
        return -1
    else:
        return 0
        
print greater_less_equal_5(4)
print greater_less_equal_5(5)
print greater_less_equal_5(6)


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* The Big If
------------
6 min
Really great work! Here’s what you’ve learned in this unit:

* Comparators
-------------
3 < 4
5 >= 5
10 == 10
12 != 13

* Boolean operators
-------------------
True or False 
(3 < 4) and (5 >= 5)
this() and not that()

* Conditional statements
------------------------
if this_might_be_true():
  print "This really is true."
elif that_might_be_true():
  print "That is true."
else:
  print "None of the above."

Let’s get to the grand finale.

* Instructions
--------------
Checkpoint 1 Passed
1.
In the workspace to your right, there is the outline of a function called grade_converter().

The purpose of this function is to take a number grade (1-100), defined by the variable grade, and to return the appropriate letter grade (A, B, C, D, or F).

Your task is to complete the function by creating appropriate if and elif statements that will compare the input grade with a number and then return a letter grade.

Your function should return the following letter grades:

	. 90 or higher should get an “A”

	. 80 - 89 should get a “B”

	. 70 - 79 should get a “C”

	. 65 - 69 should get a “D”

	. Anything below a 65 should receive an “F”

Hint
Be careful with your indentation—grade_converter() is a function (which we’ll get to in the next unit), and as you can see from the comment, function blocks are indented the same way if, 
elif, and else blocks are.

If you are having trouble creating the if and elif statements, here’s the first one you can use as an example:

if grade >= 90:
     return "A"```
This will compare the variable `grade` with the value `90` and if it is greater than or equal to `90` it will return the letter `A`.

script.py
---------
# Complete the if and elif statements!
def grade_converter(grade):
    if grade >= 90:
        return "A"
    elif grade >= 80 and grade < 89:
        return "B"
    elif grade >= 70 and grade < 79:
        return "C"
    elif grade >= 65 and grade < 69:
        return "D"
    else:
        return "F"
      
# This should print an "A"      
print grade_converter(92)

# This should print a "C"
print grade_converter(70)

# This should print an "F"
print grade_converter(61)


















































































































































































































































































































































































