# CONDITIONALS & CONTROL FLOW
-----------------------------

* Go With the Flow
------------------
4 min
Just like in real life, sometimes we’d like our code to be able to make decisions.

The Python programs we’ve written so far have had one-track minds: they can add two numbers or print something, but they don’t have the ability to pick one of these outcomes over the 
other.

Control flow gives us this ability to choose among outcomes based on what else is happening in the program.

* Instructions
--------------
Checkpoint 1 Passed
1.
Check out the code in the editor. You’ll see the type of program you’ll be able to write once you’ve mastered control flow.

Press Run and interact with the program by typing in the console!

script.py
---------
def clinic():
    print "You've just entered the clinic!"
    print "Do you take the door on the left or the right?"
    answer = raw_input("Type left or right and hit 'Enter'.").lower()
    if answer == "left" or answer == "l":
        print "This is the Verbal Abuse Room, you heap of parrot droppings!"
    elif answer == "right" or answer == "r":
        print "Of course this is the Argument Room, I've told you that already!"
    else:
        print "You didn't pick left or right! Try again."
        clinic()

clinic()

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Compare Closely!
------------------
4 min
Let’s start with the simplest aspect of control flow: comparators. There are six:

Equal to (==)

>>> 2 == 2
True
>>> 2 == 5
False

Not equal to (!=)

>>> 2 != 5
True
>>> 2 != 2
False

Less than (<)

>>> 2 < 5
True
>>> 5 < 2
False

Less than or equal to (<=)

>>> 2 <= 2
True
>>> 5 <= 2
False 

Greater than (>)

>>> 5 > 2
True
>>> 2 > 5
False

Greater than or equal to (>=)

>>> 5 >= 5
True
>>> 2 >= 5
False

Comparators check if a value is (or is not) equal to, greater than (or equal to), or less than (or equal to) another value.

Note that == compares whether two things are equal, and = assigns a value to a variable.

* Instructions
--------------
Checkpoint 1 Passed
1.
Set each variable to True or False depending on what you think the result will be. For example, 1 < 2 will be True, because one is less than two.

	. Set bool_one equal to the result of 17 < 328

	. Set bool_two equal to the result of 100 == (2 * 50)
	
	. Set bool_three equal to the result of 19 <= 19

	. Set bool_four equal to the result of -22 >= -18
	
	. Set bool_five equal to the result of 99 != (98 + 1)

Hint
Remember, you set variables like this:

bool_one = True

Keep in mind that checking for equality uses a double equals sign:

True == True

script.py
---------
# Assign True or False as appropriate on the lines below!

# Set this to True if 17 < 328 or to False if it is not.
bool_one = True   # We did this one for you!

# Set this to True if 100 == (2 * 50) or to False otherwise.
bool_two = True

# Set this to True if 19 <= 19 or to False if it is not.
bool_three = True

# Set this to True if -22 >= -18 or to False if it is not.
bool_four = False

# Set this to True if 99 != (98 + 1) or to False otherwise.
bool_five = False

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Compare... Closelier!
-----------------------
2 min
Excellent! It looks like you’re comfortable with basic expressions and comparators.

But what about extreme expressions and comparators?

* Instructions
--------------
Checkpoint 1 Passed
1.
Let’s run through the comparators again with more complex expressions. Set each variable to True or False depending on what you think the result will be.

	. Set bool_one to the result of (20 - 10) > 15

	. Set bool_two to the result of (10 + 17) == 3**16

	. Set bool_three to the result of 1**2 <= -1

	. Set bool_four to the result of 40 * 4 >= -4

	. Set bool_five to the result of 100 != 10**2

script.py
---------
# Assign True or False as appropriate on the lines below!

# (20 - 10) > 15
bool_one = False    # We did this one for you!

# (10 + 17) == 3**16
# Remember that ** can be read as 'to the power of'. 3**16 is about 43 million.
bool_two = False

# 1**2 <= -1
bool_three = False

# 40 * 4 >= -4
bool_four = True

# 100 != 10**2
bool_five = False

------------------------------------------------------------------------------------------------------------------------------------------------------------------
































































































