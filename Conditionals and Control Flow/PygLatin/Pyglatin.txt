# PYGLATIN
----------

* Break It Down
---------------
1 min
Now let’s take what we’ve learned so far and write a Pig Latin translator.

Pig Latin is a language game, where you move the first letter of the word to the end and add “ay.” So “Python” becomes “ythonpay.” To write a Pig Latin translator in Python, here are the 
steps we’ll need to take:

	1. Ask the user to input a word in English.

	2. Make sure the user entered a valid word.

	3. Convert the word from English to Pig Latin.

	4. Display the translation result.

* Instructions
--------------
When you’re ready to get coding, click Next. Since we took the time to write out the steps for our solution, you’ll know what’s coming!

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Ahoy! (or Should I Say Ahoyay!)
---------------------------------
<1 min
Let’s warm up by printing a welcome message for our translator users.

* Instructions
--------------
Checkpoint 1 Passed
1.
Please print the phrase “Pig Latin”.


Hint
The command you need is hidden in the instructions. Remember that to display text to the console, we use the print command.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Input!
--------
4 min
Next, we need to ask the user for input.

name = raw_input("What's your name?")
print name

In the above example, raw_input() accepts a string, prints it, and then waits for the user to type something and press Enter (or Return).

In the interpreter, Python will ask:

What's your name? 

Once you type in your name and hit Enter, it will be stored in name.

* Instructions
--------------
Checkpoint 1 Passed
1.
On line 4, use raw_input("Enter a word: ") to ask the user to enter a word. Save the results of raw_input() in a variable called original.

Click Run

Type a word in the console window and press Enter (or Return).


Hint
Your code should look something like this:

variable_name = raw_input('Prompt')

Does it look like your code is stuck? Is there a spinning circle? That probably means that your code is waiting for you to type something! Click inside the console window on the other 
side, type a word, then press Enter (or Return).

script.py
---------
print 'Welcome to the Pig Latin Translator!'

# Start coding here!
original = raw_input("Enter a word: ")


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Check Yourself!
-----------------
6 min
Next we need to ensure that the user actually typed something.

empty_string = ""
if len(empty_string) > 0:
  # Run this block.
  # Maybe print something?
else:
  # That string must have been empty.

We can check that the user’s string actually has characters!

* Instructions
--------------
Checkpoint 1 Passed
1.
Write an if statement that verifies that the string has characters.

	. Add an if statement that checks that len(original) is greater than zero. Don’t forget the : at the end of the if statement!

	. If the string actually has some characters in it, print the user’s word.

	. Otherwise (i.e. an else: statement), please print "empty".

You’ll want to run your code multiple times, testing an empty string and a string with characters. When you’re confident your code works, continue to the next exercise.


Hint
Don’t forget that > is the greater than operator!

Does it look like your code is stuck? Is there a spinning circle? That probably means that your code is waiting for you to type something! Click inside the console window on the other 
side, type a word, then press Enter (or Return).

script.py
---------
print 'Welcome to the Pig Latin Translator!'

# Start coding here!
original = raw_input("Enter a word: ")

if len(original) > 0:
  print original
else:
  print "empty"

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Check Yourself... Some More
-----------------------------
4 min
Now we know we have a non-empty string. Let’s be even more thorough and check that our string only contains letters.

Consider the following code:

x = "J123"
x.isalpha()  # This will return 'False'

In the first line, we create a string with letters and numbers.

The second line then runs the method .isalpha() which returns False since the string contains non-letter characters.

You can use .isalpha() to check that a string doesn’t contain any non-letter characters! For example:

* Instructions
--------------
Checkpoint 1 Passed
1.
Use and to add a second condition to your if statement. In addition to your existing check that the string contains characters, you should also use .isalpha() to make sure that it only 
contains letters.

Don’t forget to keep the colon at the end of the if statement!

Press Run and enter a word in the terminal to test your code!


Hint
To combine multiple conditions in one if, you can use and between the two conditions, like this:

if has_chars(the_string) and the_string.isalpha():
  print the_string
else:
  print "empty"

script.py
---------
print 'Welcome to the Pig Latin Translator!'

# Start coding here!
original = raw_input("Enter a word: ")

if len(original) > 0 and original.isalpha():
  print(original)
else:
  print("empty")

------------------------------------------------------------------------------------------------------------------------------------------------------------------

























































































































