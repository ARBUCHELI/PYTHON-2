# FUNCTIONS
-----------

* What Good are Functions?
--------------------------
3 min
You might have considered the situation where you would like to reuse a piece of code, just with a few different values. Instead of rewriting the whole code, it’s much cleaner to define a 
function, which can then be used repeatedly.

* Instructions
--------------
Checkpoint 1 Passed
1.
Check out the code in the editor. We’ve defined two functions: tax to calculate the tax on a bill, and tip to compute the tip.

See how much of the code you understand at first glance (we’ll explain it all soon). When you’re ready, click Run to continue.


Hint
Remember how we used %s to print strings? We can use %f to print floats! (That is, numbers with decimals in them.)

script.py
---------
def tax(bill):
  """Adds 8% tax to a restaurant bill."""
  bill *= 1.08
  print "With tax: %f" % bill
  return bill

def tip(bill):
  """Adds 15% tip to a restaurant bill."""
  bill *= 1.15
  print "With tip: %f" % bill
  return bill
  
meal_cost = 100
meal_with_tax = tax(meal_cost)
meal_with_tip = tip(meal_with_tax)

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Function Junction
-------------------
6 min
Functions are defined with three components:

	1. The header, which includes the def keyword, the name of the function, and any parameters the function requires. Here’s an example:

		def hello_world(): # There are no parameters

	2. An optional comment that explains what the function does.

		"""Prints 'Hello World!' to the console."""

	3. The body, which describes the procedures the function carries out. The body is indented, just like conditional statements.

		print "Hello World!"

Here’s the full function pieced together:

def hello_world():
  """Prints 'Hello World!' to the console."""
  print "Hello World!"

* Instructions
--------------
Checkpoint 1 Passed
1.
Go ahead and create a function, spam, that prints the string "Eggs!" to the console. Don’t forget to include a comment of your own choosing (enclose it in triple quotes!).


Hint
If you’re stuck, look closely at the example function syntax in the instructional text. Remember: whitespace counts in Python!

script.py
---------
# Define your spam function starting on line 5. You
# can leave the code on line 10 alone for now--we'll
# explain it soon!

def spam():
  """Prints 'Eggs!'"""
  print "Eggs!"

# Define the spam function above this line.
spam()

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Call and Response
-------------------
2 min
After defining a function, it must be called to be implemented. In the previous exercise, spam() in the last line told the program to look for the function called spam and execute the 
code inside it.

* Instructions
--------------
Checkpoint 1 Passed
1.
We’ve set up a function, square. Call it on the number 10 (by putting 10 between the parentheses of square()) on line 10!


Hint
Remember when we called spam in the previous exercise, like this: spam()? You can do the same here with square(), only you’ll need to put 10 in between the parentheses so square knows 
what number to… well, square.

script.py
---------
def square(n):
  """Returns the square of a number."""
  squared = n ** 2
  print "%d squared is %d." % (n, squared)
  return squared
  
# Call the square function on line 10! Make sure to
# include the number 10 between the parentheses.
square(10)

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Parameters and Arguments
--------------------------
4 min
Let’s take another look at the definition of the function square from the previous exercise:

def square(n):

Here, n is a parameter of square. A parameter is a variable that is an input to a function. It says, “Later, when square is used, you’ll be able to input any value you want, but for now 
we’ll call that future value n.” A function can have any number of parameters.

The values of the parameters passed into a function are known as the arguments. Recall in the previous example, we called:

square(10)```

Here, the function `square` was called with the parameter `n` set to the argument `10`.

Typically, when you call a function, you should pass in the same number of arguments as there are parameters.

To summarize:

- When defining a function, placeholder [variables](https://www.codecademy.com/resources/docs/python/variables) are called parameters.
- When using, or calling, a function, inputs into the function are called arguments.

* Instructions
--------------
Checkpoint 1 Passed
1.
Check out the function in the editor, power. It should take two arguments, a base and an exponent, and raise the first to the power of the second. It’s currently broken, however, because 
its parameters are missing.

Replace the ___s with the parameters base and exponent and then call the power function with a base of 37 and an exponent of 4.


Hint
Make sure to include the parameters base and exponent between the parentheses on line 1, and the arguments 37 and 4 between the parentheses on line 5. Your parameters and arguments need 
to be separated by a comma, like this: (base, exponent).

script.py
---------
def power(base, exponent):  # Add your parameters here!
  result = base ** exponent
  print "%d to the power of %d is %d." % (base, exponent, result)

power(37, 4)  # Add your arguments here!

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Functions Calling Functions
-----------------------------
3 min
We’ve seen functions that can print text or do simple arithmetic, but functions can be much more powerful than that. For example, a function can call another function:

def fun_one(n):
  return n * 5

def fun_two(m):
  return fun_one(m) + 7

* Instructions
--------------
Checkpoint 1 Passed
1.
Let’s look at the two functions in the editor: one_good_turn (which adds 1 to the number it takes in as an argument) and deserves_another (which adds 2).

Change the body of deserves_another so that it always adds 2 to the output of one_good_turn.


Hint
The n in the body of deserves_another should be replaced by a call to the function one_good_turn(n).

script.py
---------
def one_good_turn(n):
  return n + 1
    
def deserves_another(n):
  return one_good_turn(n) + 2

------------------------------------------------------------------------------------------------------------------------------------------------------------------























































































































