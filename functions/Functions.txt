# FUNCTIONS
-----------

* What Good are Functions?
--------------------------
3 min
You might have considered the situation where you would like to reuse a piece of code, just with a few different values. Instead of rewriting the whole code, it’s much cleaner to define a 
function, which can then be used repeatedly.

* Instructions
--------------
Checkpoint 1 Passed
1.
Check out the code in the editor. We’ve defined two functions: tax to calculate the tax on a bill, and tip to compute the tip.

See how much of the code you understand at first glance (we’ll explain it all soon). When you’re ready, click Run to continue.


Hint
Remember how we used %s to print strings? We can use %f to print floats! (That is, numbers with decimals in them.)

script.py
---------
def tax(bill):
  """Adds 8% tax to a restaurant bill."""
  bill *= 1.08
  print "With tax: %f" % bill
  return bill

def tip(bill):
  """Adds 15% tip to a restaurant bill."""
  bill *= 1.15
  print "With tip: %f" % bill
  return bill
  
meal_cost = 100
meal_with_tax = tax(meal_cost)
meal_with_tip = tip(meal_with_tax)

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Function Junction
-------------------
6 min
Functions are defined with three components:

	1. The header, which includes the def keyword, the name of the function, and any parameters the function requires. Here’s an example:

		def hello_world(): # There are no parameters

	2. An optional comment that explains what the function does.

		"""Prints 'Hello World!' to the console."""

	3. The body, which describes the procedures the function carries out. The body is indented, just like conditional statements.

		print "Hello World!"

Here’s the full function pieced together:

def hello_world():
  """Prints 'Hello World!' to the console."""
  print "Hello World!"

* Instructions
--------------
Checkpoint 1 Passed
1.
Go ahead and create a function, spam, that prints the string "Eggs!" to the console. Don’t forget to include a comment of your own choosing (enclose it in triple quotes!).


Hint
If you’re stuck, look closely at the example function syntax in the instructional text. Remember: whitespace counts in Python!

script.py
---------
# Define your spam function starting on line 5. You
# can leave the code on line 10 alone for now--we'll
# explain it soon!

def spam():
  """Prints 'Eggs!'"""
  print "Eggs!"

# Define the spam function above this line.
spam()

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Call and Response
-------------------
2 min
After defining a function, it must be called to be implemented. In the previous exercise, spam() in the last line told the program to look for the function called spam and execute the 
code inside it.

* Instructions
--------------
Checkpoint 1 Passed
1.
We’ve set up a function, square. Call it on the number 10 (by putting 10 between the parentheses of square()) on line 10!


Hint
Remember when we called spam in the previous exercise, like this: spam()? You can do the same here with square(), only you’ll need to put 10 in between the parentheses so square knows 
what number to… well, square.

script.py
---------
def square(n):
  """Returns the square of a number."""
  squared = n ** 2
  print "%d squared is %d." % (n, squared)
  return squared
  
# Call the square function on line 10! Make sure to
# include the number 10 between the parentheses.
square(10)

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Parameters and Arguments
--------------------------
4 min
Let’s take another look at the definition of the function square from the previous exercise:

def square(n):

Here, n is a parameter of square. A parameter is a variable that is an input to a function. It says, “Later, when square is used, you’ll be able to input any value you want, but for now 
we’ll call that future value n.” A function can have any number of parameters.

The values of the parameters passed into a function are known as the arguments. Recall in the previous example, we called:

square(10)```

Here, the function `square` was called with the parameter `n` set to the argument `10`.

Typically, when you call a function, you should pass in the same number of arguments as there are parameters.

To summarize:

- When defining a function, placeholder [variables](https://www.codecademy.com/resources/docs/python/variables) are called parameters.
- When using, or calling, a function, inputs into the function are called arguments.

* Instructions
--------------
Checkpoint 1 Passed
1.
Check out the function in the editor, power. It should take two arguments, a base and an exponent, and raise the first to the power of the second. It’s currently broken, however, because 
its parameters are missing.

Replace the ___s with the parameters base and exponent and then call the power function with a base of 37 and an exponent of 4.


Hint
Make sure to include the parameters base and exponent between the parentheses on line 1, and the arguments 37 and 4 between the parentheses on line 5. Your parameters and arguments need 
to be separated by a comma, like this: (base, exponent).

script.py
---------
def power(base, exponent):  # Add your parameters here!
  result = base ** exponent
  print "%d to the power of %d is %d." % (base, exponent, result)

power(37, 4)  # Add your arguments here!

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Functions Calling Functions
-----------------------------
3 min
We’ve seen functions that can print text or do simple arithmetic, but functions can be much more powerful than that. For example, a function can call another function:

def fun_one(n):
  return n * 5

def fun_two(m):
  return fun_one(m) + 7

* Instructions
--------------
Checkpoint 1 Passed
1.
Let’s look at the two functions in the editor: one_good_turn (which adds 1 to the number it takes in as an argument) and deserves_another (which adds 2).

Change the body of deserves_another so that it always adds 2 to the output of one_good_turn.


Hint
The n in the body of deserves_another should be replaced by a call to the function one_good_turn(n).

script.py
---------
def one_good_turn(n):
  return n + 1
    
def deserves_another(n):
  return one_good_turn(n) + 2

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Practice Makes Perfect
------------------------
10 min
Let’s create a few more functions just for good measure.

def shout(phrase):
  if phrase == phrase.upper():
    return "YOU'RE SHOUTING!"
  else:
    return "Can you speak up?"

shout("I'M INTERESTED IN SHOUTING")

The example above is just there to help you remember how functions are structured.

Don’t forget the colon at the end of your function definition!

* Instructions
--------------
Checkpoint 1 Passed
1.
First, def a function called cube that takes an argument called number. Don’t forget the parentheses and the colon!

Make that function return the cube of that number (i.e. that number multiplied by itself and multiplied by itself once again).

Define a second function called by_three that takes an argument called number.

if that number is divisible by 3, by_three should call cube(number) and return its result. Otherwise, by_three should return False.

Don’t forget that if and else statements need a : at the end of that line!


Hint
if n % 3 == 0:
  print "n is divisible by 3"
else:
  print "n is not"

Make sure both functions return their values rather than printing them.

Both branches of the if/else statement in by_three need to have return statements in them (that’s three returns total, two for by_three and one for cube).

script.py
---------
def cube(number):
  return number * number * number

def by_three(number):
  if number % 3 == 0:
    return cube(number)
  else:
    return False

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* I Know Kung Fu
----------------
1 min
Remember import this from the first exercise in this course? That was an example of importing a module. A module is a file that contains definitions—including variables and functions—that 
you can use once it is imported.

* Instructions
--------------
Checkpoint 1 Passed
1.
Before we try any fancy importing, let’s see what Python already knows about square roots. On line 3 in the editor, ask Python to

print sqrt(25)

which we would expect to equal five.

Instead, it throws an error.

script.py
---------
# Ask Python to print sqrt(25) on line 3.

print (sqrt(25))

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Generic Imports
-----------------
1 min
Did you see that? Python said: NameError: name 'sqrt' is not defined. Python doesn’t know what square roots are—yet.

There is a Python module named math that includes a number of useful variables and functions, and sqrt() is one of those functions. In order to access math, all you need is the import 
keyword. When you simply import a module this way, it’s called a generic import.

* Instructions
--------------
Checkpoint 1 Passed
1.
You’ll need to do two things here:

	. Type import math on line 2 in the editor.

	. Insert math. before sqrt() so that it has the form math.sqrt(). This tells Python not only to import math, but to get the sqrt() function from within math. Then hit Run to see 
	what Python now knows.

Hint
Make sure you import math (no colons or anything like that), and make sure you ask Python to print math.sqrt(25).

script.py
---------
# Ask Python to print sqrt(25) on line 3.
import math
print (math.sqrt(25))

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Function Imports
------------------
2 min
Nice work! Now Python knows how to take the square root of a number.

However, we only really needed the sqrt function, and it can be frustrating to have to keep typing math.sqrt().

It’s possible to import only certain variables or functions from a given module. Pulling in just a single function from a module is called a function import, and it’s done with the from 
keyword:

from module import function

Now you can just type sqrt() to get the square root of a number—no more math.sqrt()!

* Instructions
--------------
Checkpoint 1 Passed
1.
Let’s import only the sqrt function from math this time. (You don’t need the () after sqrt in the from math import sqrt bit.)

Remember: from module import function! (Don’t include the parentheses here—just the function name, e.g. sqrt.)

script.py
---------
# Import *just* the sqrt function from math on line 3!

from math import sqrt

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Universal Imports
-------------------
1 min
Great! We’ve found a way to handpick the variables and functions we want from modules.

What if we still want all of the variables and functions in a module but don’t want to have to constantly type math.?

Universal import can handle this for you. The syntax for this is:

from module import *

* Instructions
--------------
Checkpoint 1 Passed
1.
Use the power of from module import * to import everything from the math module on line 3 of the editor.

Just like this: from math import *

script.py
---------
from math import *


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Here Be Dragons
-----------------
2 min
Universal imports may look great on the surface, but they’re not a good idea for one very important reason: they fill your program with a ton of variable and function names without the 
safety of those names still being associated with the module(s) they came from.

If you have a function of your very own named sqrt and you import math, your function is safe: there is your sqrt and there is math.sqrt. If you do from math import *, however, you have a 
problem: namely, two different functions with the exact same name.

Even if your own definitions don’t directly conflict with names from imported modules, if you import * from several modules at once, you won’t be able to figure out which variable or 
function came from where.

For these reasons, it’s best to stick with either import module and type module.name or just import specific variables and functions from various modules as needed.

* Instructions
--------------
Checkpoint 1 Passed
1.
The code in the editor will show you everything available in the math module.

Click Run to check it out (you’ll see sqrt, along with some other useful things like pi, factorial, and trigonometric functions.

script.py
---------
import math # Imports the math module
everything = dir(math) # Sets everything to a list of things from math
print everything # Prints 'em all!


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* On Beyond Strings
-------------------
2 min
Now that you understand what functions are and how to import modules, let’s look at some of the functions that are built in to Python (no modules required!).

You already know about some of the built-in functions we’ve used with strings, such as .upper(), .lower(), str(), and len(). These are great for doing work with strings, but what about 
something a little more analytic?

* Instructions
--------------
Checkpoint 1 Passed
1.
What do you think the code in the editor will do? Click Run when you think you have an idea.

script.py
---------
def biggest_number(*args):
  print max(args)
  return max(args)
    
def smallest_number(*args):
  print min(args)
  return min(args)

def distance_from_zero(arg):
  print abs(arg)
  return abs(arg)

biggest_number(-10, -5, 5, 10)
smallest_number(-10, -5, 5, 10)
distance_from_zero(-10)


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* max()
-------
1 min
The max() function takes any number of arguments and returns the largest one. (“Largest” can have odd definitions here, so it’s best to use max() on integers and floats, where the results 
are straightforward, and not on other objects, like strings.)

For example, max(1,2,3) will return 3 (the largest number in the set of arguments).

* Instructions
--------------
Checkpoint 1 Passed
1.
Try out the max() function on line 3 of the editor. You can provide any number of integer or float arguments to max().

script.py
---------
# Set maximum to the max value of any set of numbers on line 3!

maximum = max(1,2,3,4,5,6)

print maximum


------------------------------------------------------------------------------------------------------------------------------------------------------------------





























































































































































































