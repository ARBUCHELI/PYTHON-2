# FUNCTIONS
-----------

* What Good are Functions?
--------------------------
3 min
You might have considered the situation where you would like to reuse a piece of code, just with a few different values. Instead of rewriting the whole code, it’s much cleaner to define a 
function, which can then be used repeatedly.

* Instructions
--------------
Checkpoint 1 Passed
1.
Check out the code in the editor. We’ve defined two functions: tax to calculate the tax on a bill, and tip to compute the tip.

See how much of the code you understand at first glance (we’ll explain it all soon). When you’re ready, click Run to continue.


Hint
Remember how we used %s to print strings? We can use %f to print floats! (That is, numbers with decimals in them.)

script.py
---------
def tax(bill):
  """Adds 8% tax to a restaurant bill."""
  bill *= 1.08
  print "With tax: %f" % bill
  return bill

def tip(bill):
  """Adds 15% tip to a restaurant bill."""
  bill *= 1.15
  print "With tip: %f" % bill
  return bill
  
meal_cost = 100
meal_with_tax = tax(meal_cost)
meal_with_tip = tip(meal_with_tax)

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Function Junction
-------------------
6 min
Functions are defined with three components:

	1. The header, which includes the def keyword, the name of the function, and any parameters the function requires. Here’s an example:

		def hello_world(): # There are no parameters

	2. An optional comment that explains what the function does.

		"""Prints 'Hello World!' to the console."""

	3. The body, which describes the procedures the function carries out. The body is indented, just like conditional statements.

		print "Hello World!"

Here’s the full function pieced together:

def hello_world():
  """Prints 'Hello World!' to the console."""
  print "Hello World!"

* Instructions
--------------
Checkpoint 1 Passed
1.
Go ahead and create a function, spam, that prints the string "Eggs!" to the console. Don’t forget to include a comment of your own choosing (enclose it in triple quotes!).


Hint
If you’re stuck, look closely at the example function syntax in the instructional text. Remember: whitespace counts in Python!

script.py
---------
# Define your spam function starting on line 5. You
# can leave the code on line 10 alone for now--we'll
# explain it soon!

def spam():
  """Prints 'Eggs!'"""
  print "Eggs!"

# Define the spam function above this line.
spam()

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Call and Response
-------------------
2 min
After defining a function, it must be called to be implemented. In the previous exercise, spam() in the last line told the program to look for the function called spam and execute the 
code inside it.

* Instructions
--------------
Checkpoint 1 Passed
1.
We’ve set up a function, square. Call it on the number 10 (by putting 10 between the parentheses of square()) on line 10!


Hint
Remember when we called spam in the previous exercise, like this: spam()? You can do the same here with square(), only you’ll need to put 10 in between the parentheses so square knows 
what number to… well, square.

script.py
---------
def square(n):
  """Returns the square of a number."""
  squared = n ** 2
  print "%d squared is %d." % (n, squared)
  return squared
  
# Call the square function on line 10! Make sure to
# include the number 10 between the parentheses.
square(10)

------------------------------------------------------------------------------------------------------------------------------------------------------------------





























































































