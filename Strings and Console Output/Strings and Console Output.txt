# STRINGS & CONSOLE OUTPUT
--------------------------

* Strings
---------
2 min
Another useful data type is the string. A string can contain letters, numbers, and symbols.

name = "Ryan"
age = "19"
food = "cheese"

	1. In the above example, we create a variable name and set it to the string value "Ryan".

	2. We also set age to "19" and food to "cheese".

Strings need to be within quotes.

* Instructions
--------------
Checkpoint 1 Passed
1.
Create a new variable brian and assign it the string "Hello life!".


Hint
Do you remember how to declare and assign variables in Python? If not, refresh your memory here!

There is no difference between using single quotes ' and double quotes ". However, sometimes it is helpful to use one or the other. If we want to include an apostrophe in our string, it 
would be smart to use double quotes to create the string like "I'm a string". If we want to use quotes in the string, we might want to create the string with single quote like 'The man 
screamed "I love Python!" so that everyone could hear.'

script.py
---------
# Set the variable brian on line 3!
brian = "Hello life!"

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Practice
----------
1 min
Excellent! Let’s get a little practice in with strings.

* Instructions
--------------
Checkpoint 1 Passed
1.
Set the following variables to their respective phrases:

	1. Set caesar to "Graham"

	2. Set praline to "John"

	3. Set viking to "Teresa"

Hint
Make sure you use exactly the capitalization shown! Python takes things very literally.

script.py
---------
# Assign your variables below, each on its own line!
caesar = "Graham"
praline = "John"
viking = "Teresa"




# Put your variables above this line

print caesar
print praline
print viking

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Escaping characters
---------------------
1 min
There are some characters that cause problems. For example:

'There's a snake in my boot!'

This code breaks because Python thinks the apostrophe in 'There's' ends the string. We can use the backslash to fix the problem, like this:

'There\'s a snake in my boot!'

* Instructions
--------------
Checkpoint 1 Passed
1.
Fix the string in the editor!


Hint
You can escape the ' just by adding a ' before it: \'.

There’s another way to fix this problem. Can you think of it?

You cannot pass this exercise with the other methods.

script.py
---------
# The string below is broken. Fix it using the escape backslash!

'This isn\'t flying, this is falling with style!'

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Access by Index
-----------------
5 min
Great work!

Each character in a string is assigned a number. This number is called the index. Check out the diagram in the editor.

c = "cats"[0]
n = "Ryan"[3]

	1. In the above example, we create a new variable called c and set it to "c", the character at index zero of the string "cats".

	2. Next, we create a new variable called n and set it to "n", the character at index three of the string "Ryan".

Notice that in the first “cat” example we are calling the 0th letter of “cat” and getting “c” in return. This is because in Python indices begin counting at 0. Therefore, in the string 
“cats”, the first letter, “c”, is at the 0th index and the last letter, “s”, is at the 3rd index.

* Instructions
--------------
Checkpoint 1 Passed
1.
On line 13, assign the variable fifth_letter equal to the fifth letter of the string “MONTY”.

Remember that the fifth letter is not at index 5. Start counting your indices from zero.


Hint
The letter you want is "Y".

script.py
---------
"""
The string "PYTHON" has six characters,
numbered 0 to 5, as shown below:

+---+---+---+---+---+---+
| P | Y | T | H | O | N |
+---+---+---+---+---+---+
  0   1   2   3   4   5

So if you wanted "Y", you could just type
"PYTHON"[1] (always start counting from 0!)
"""
fifth_letter = "MONTY"[4];

print fifth_letter

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* String methods
----------------
2 min
Great work! Now that we know how to store strings, let’s see how we can change them using string methods.

String methods let you perform specific tasks for strings.

We’ll focus on four string methods:

	. len()
	. lower()
	. upper()
	. str()

Let’s start with len(), which gets the length (the number of characters) of a string!

* Instructions
--------------
Checkpoint 1 Passed
1.
On line 1, create a variable named parrot and set it to the string "Norwegian Blue".

On line 2, type len(parrot) after the word print, like so: print len(parrot). The output will be the number of characters in "Norwegian Blue"!


Hint
We’ll explain print in the next section!

script.py
---------
parrot = "Norwegian Blue"
print (len(parrot))

------------------------------------------------------------------------------------------------------------------------------------------------------------------
















































































